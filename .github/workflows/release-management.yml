name: 📦 Professional Release Management

on:
  push:
    tags:
      - 'v*.*.*'
      - 'v*.*.*-alpha*'
      - 'v*.*.*-beta*'
      - 'v*.*.*-rc*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.2.3)'
        required: true
        type: string
      release_type:
        description: 'Type of release'
        required: true
        default: 'stable'
        type: choice
        options:
        - stable
        - alpha
        - beta
        - release-candidate
      include_assets:
        description: 'Include release assets'
        required: false
        default: true
        type: boolean

env:
  RELEASE_BRANCH: master
  ARTIFACT_RETENTION_DAYS: 365
  PACKAGE_REGISTRY: ghcr.io

permissions:
  contents: write
  packages: write
  deployments: write
  pull-requests: write
  issues: write

jobs:
  validate-release:
    name: 🔍 Release Validation
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.extract-version.outputs.version }}
      is-prerelease: ${{ steps.extract-version.outputs.is-prerelease }}
      release-notes: ${{ steps.generate-notes.outputs.notes }}
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: 🏷️ Extract Version Information
      id: extract-version
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          VERSION=${GITHUB_REF#refs/tags/}
        fi
        
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        
        # Check if this is a prerelease
        if [[ "$VERSION" =~ (alpha|beta|rc) ]]; then
          echo "is-prerelease=true" >> $GITHUB_OUTPUT
        else
          echo "is-prerelease=false" >> $GITHUB_OUTPUT
        fi
        
        echo "Extracted version: $VERSION"
    
    - name: 📋 Validate Version Format
      run: |
        VERSION="${{ steps.extract-version.outputs.version }}"
        if [[ ! "$VERSION" =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+(\.[0-9]+)?)?$ ]]; then
          echo "❌ Invalid version format: $VERSION"
          echo "Expected format: v1.2.3 or v1.2.3-alpha.1"
          exit 1
        fi
        echo "✅ Version format is valid: $VERSION"
    
    - name: 📝 Generate Release Notes
      id: generate-notes
      run: |
        VERSION="${{ steps.extract-version.outputs.version }}"
        
        # Get the previous tag
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        
        # Generate release notes
        cat > release-notes.md << EOF
        # 🚀 Jir-Course Academy Release $VERSION
        
        **Release Date:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")
        **Release Type:** ${{ github.event.inputs.release_type || 'stable' }}
        **Branch:** ${{ env.RELEASE_BRANCH }}
        
        ## 📊 Release Statistics
        - **Commits since last release:** $(git rev-list --count ${PREVIOUS_TAG}..HEAD 2>/dev/null || echo "N/A")
        - **Files changed:** $(git diff --name-only ${PREVIOUS_TAG}..HEAD 2>/dev/null | wc -l || echo "N/A")
        - **Contributors:** $(git shortlog -sn ${PREVIOUS_TAG}..HEAD 2>/dev/null | wc -l || echo "N/A")
        
        ## 🎯 What's New
        
        ### 🔥 Major Features
        - Enhanced enterprise-grade GitHub Actions workflows
        - Comprehensive API documentation and reference
        - Professional troubleshooting and diagnostic tools
        - Advanced lab environment setup automation
        - Enterprise security audit and compliance framework
        
        ### 🛡️ Security Enhancements
        - Advanced secret scanning and vulnerability detection
        - Multi-layer security analysis (SAST, dependency scanning)
        - Professional incident response procedures
        - Enhanced authentication and authorization framework
        
        ### 📚 Documentation Improvements
        - Complete API reference with authentication examples
        - Comprehensive troubleshooting guide with diagnostic scripts
        - Professional lab setup with infrastructure as code
        - Enhanced community guidelines and code of conduct
        
        ### 🔧 Technical Improvements
        - Professional CI/CD pipeline with matrix builds
        - Automated artifact management and retention
        - Enterprise-grade monitoring and alerting
        - Advanced error handling and fallback mechanisms
        
        ## 📦 Installation & Upgrade
        
        ### Quick Installation
        \`\`\`bash
        curl -sSL https://github.com/el-pablos/Jir-Course/releases/latest/download/install.sh | bash
        \`\`\`
        
        ### Manual Installation
        \`\`\`bash
        wget https://github.com/el-pablos/Jir-Course/archive/$VERSION.tar.gz
        tar -xzf $VERSION.tar.gz
        cd Jir-Course-*
        chmod +x setup.sh && ./setup.sh
        \`\`\`
        
        ### Docker Installation
        \`\`\`bash
        docker pull ghcr.io/el-pablos/jir-course:$VERSION
        docker run -it --rm ghcr.io/el-pablos/jir-course:$VERSION
        \`\`\`
        
        ## ⚠️ Breaking Changes
        
        $(if [[ "${{ steps.extract-version.outputs.is-prerelease }}" == "true" ]]; then
          echo "⚠️ **This is a pre-release version and may contain breaking changes.**"
          echo "Please test thoroughly before using in production environments."
        else
          echo "✅ **This is a stable release with backward compatibility maintained.**"
        fi)
        
        ## 🔗 Resources
        - **Documentation:** [Wiki](https://github.com/el-pablos/Jir-Course/wiki)
        - **API Reference:** [API Docs](https://github.com/el-pablos/Jir-Course/wiki/API-Reference)
        - **Troubleshooting:** [Support Guide](https://github.com/el-pablos/Jir-Course/wiki/Troubleshooting)
        - **Community:** [Discord](https://discord.gg/jircourse) | [Telegram](https://t.me/+SfN6YXOTwCgyNDY1)
        
        ## 🙏 Acknowledgments
        
        **👑 Original Technical Content:** Sekiya - Master cybersecurity practitioner and educator  
        **🏗️ Compiled and Summarized by:** Tamas - Repository architect and documentation specialist
        
        Special thanks to all community members who contributed to this release through
        testing, feedback, and suggestions.
        
        ---
        
        **🔐 Security Notice:** Always verify release signatures and checksums before installation.
        **⚖️ Legal Notice:** Use this software only for authorized testing and educational purposes.
        
        *Happy Learning & Stay Ethical!* 🎓✨
        EOF
        
        # Set output for GitHub release
        echo "notes<<EOF" >> $GITHUB_OUTPUT
        cat release-notes.md >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

  build-release-assets:
    name: 🏗️ Build Release Assets
    runs-on: ubuntu-latest
    needs: validate-release
    if: github.event.inputs.include_assets != 'false'
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: 🐍 Setup Python Environment
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: 🔧 Setup Node.js Environment
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: 🏗️ Build Distribution Packages
      run: |
        VERSION="${{ needs.validate-release.outputs.version }}"
        echo "Building release assets for version: $VERSION"
        
        # Create version file
        echo "$VERSION" > VERSION
        echo "$(date -u)" > BUILD_DATE
        echo "${{ github.sha }}" > BUILD_COMMIT
        
        # Create comprehensive build information
        cat > BUILD_INFO.json << EOF
        {
          "version": "$VERSION",
          "build_date": "$(date -u)",
          "commit_sha": "${{ github.sha }}",
          "branch": "${{ github.ref_name }}",
          "is_prerelease": ${{ needs.validate-release.outputs.is-prerelease }},
          "workflow_run": "${{ github.run_number }}",
          "build_environment": {
            "os": "ubuntu-latest",
            "python_version": "3.11",
            "node_version": "18"
          },
          "repository": {
            "name": "${{ github.repository }}",
            "url": "https://github.com/${{ github.repository }}"
          }
        }
        EOF
        
        # Create source distribution
        tar --exclude='.git' \
            --exclude='.github' \
            --exclude='node_modules' \
            --exclude='__pycache__' \
            --exclude='*.pyc' \
            --exclude='.pytest_cache' \
            -czf "jir-course-${VERSION}.tar.gz" .
        
        # Create ZIP distribution for Windows users
        zip -r "jir-course-${VERSION}.zip" . \
            -x ".git/*" ".github/*" "node_modules/*" "__pycache__/*" "*.pyc" ".pytest_cache/*"
        
        # Generate checksums
        sha256sum jir-course-${VERSION}.tar.gz > checksums.txt
        sha256sum jir-course-${VERSION}.zip >> checksums.txt
        
        # Create installation script
        cat > install.sh << 'EOF'
        #!/bin/bash
        # Jir-Course Academy Professional Installation Script
        # Version: $VERSION
        # Generated: $(date -u)
        
        set -e
        
        REPO_URL="https://github.com/el-pablos/Jir-Course"
        VERSION="$VERSION"
        INSTALL_DIR="$HOME/jir-course"
        
        echo "🎓 Jir-Course Academy Professional Installer"
        echo "Version: $VERSION"
        echo "========================================"
        
        # Check prerequisites
        command -v git >/dev/null 2>&1 || { echo "❌ Git is required but not installed. Aborting." >&2; exit 1; }
        command -v python3 >/dev/null 2>&1 || { echo "❌ Python 3 is required but not installed. Aborting." >&2; exit 1; }
        
        # Create installation directory
        mkdir -p "$INSTALL_DIR"
        cd "$INSTALL_DIR"
        
        # Download and extract
        echo "📥 Downloading Jir-Course Academy..."
        if command -v curl >/dev/null 2>&1; then
            curl -L "$REPO_URL/archive/$VERSION.tar.gz" -o jir-course.tar.gz
        elif command -v wget >/dev/null 2>&1; then
            wget "$REPO_URL/archive/$VERSION.tar.gz" -O jir-course.tar.gz
        else
            echo "❌ Neither curl nor wget found. Please install one of them."
            exit 1
        fi
        
        echo "📦 Extracting files..."
        tar -xzf jir-course.tar.gz --strip-components=1
        rm jir-course.tar.gz
        
        # Make scripts executable
        find . -name "*.sh" -exec chmod +x {} \;
        
        # Setup Python environment
        if [ -f "requirements.txt" ]; then
            echo "🐍 Setting up Python environment..."
            python3 -m pip install --user -r requirements.txt
        fi
        
        echo "✅ Installation completed successfully!"
        echo ""
        echo "🚀 Next steps:"
        echo "   cd $INSTALL_DIR"
        echo "   ./setup.sh"
        echo ""
        echo "📚 Documentation: https://github.com/el-pablos/Jir-Course/wiki"
        echo "💬 Community: https://discord.gg/jircourse"
        echo ""
        echo "⚖️ Remember: Use only for authorized testing and educational purposes!"
        EOF
        
        chmod +x install.sh
        
        # Create quick start guide
        cat > QUICKSTART.md << EOF
        # 🚀 Jir-Course Academy Quick Start Guide
        
        **Version:** $VERSION  
        **Release Date:** $(date -u +"%Y-%m-%d")
        
        ## 📋 Prerequisites
        - Linux/macOS/Windows with WSL2
        - Python 3.9 or higher
        - Git version control
        - 16GB RAM (32GB recommended)
        - 100GB free disk space
        
        ## ⚡ Quick Installation
        
        ### Option 1: Automated Installer
        \`\`\`bash
        curl -sSL https://github.com/el-pablos/Jir-Course/releases/download/$VERSION/install.sh | bash
        \`\`\`
        
        ### Option 2: Manual Installation
        \`\`\`bash
        wget https://github.com/el-pablos/Jir-Course/releases/download/$VERSION/jir-course-$VERSION.tar.gz
        tar -xzf jir-course-$VERSION.tar.gz
        cd jir-course-$VERSION
        chmod +x setup.sh && ./setup.sh
        \`\`\`
        
        ### Option 3: Git Clone
        \`\`\`bash
        git clone https://github.com/el-pablos/Jir-Course.git
        cd Jir-Course
        git checkout $VERSION
        ./setup.sh
        \`\`\`
        
        ## 🎯 First Steps
        
        1. **Review Ethical Guidelines**
           \`\`\`bash
           cat README.md | grep -A 20 "ETHICAL DISCLAIMER"
           \`\`\`
        
        2. **Complete Environment Setup**
           \`\`\`bash
           ./setup.sh
           source ~/.bashrc
           \`\`\`
        
        3. **Start with Reconnaissance Module**
           \`\`\`bash
           cd 06-Reconnaissance
           cat README.md
           \`\`\`
        
        4. **Join the Community**
           - Discord: https://discord.gg/jircourse
           - Telegram: https://t.me/+SfN6YXOTwCgyNDY1
        
        ## 🆘 Support & Resources
        
        - **📖 Wiki Documentation**: [GitHub Wiki](https://github.com/el-pablos/Jir-Course/wiki)
        - **🔧 Troubleshooting**: [Support Guide](https://github.com/el-pablos/Jir-Course/wiki/Troubleshooting)
        - **🐛 Bug Reports**: [GitHub Issues](https://github.com/el-pablos/Jir-Course/issues)
        - **💬 Community Support**: [Discord Server](https://discord.gg/jircourse)
        
        ## ⚖️ Legal & Ethical Notice
        
        **IMPORTANT:** This software is for educational and authorized testing purposes only.
        
        - ✅ Use only on systems you own or have explicit permission to test
        - ✅ Follow responsible disclosure practices
        - ✅ Respect privacy and data protection laws
        - ❌ Never use for unauthorized access or malicious purposes
        
        ---
        
        **Happy Learning & Stay Ethical!** 🎓🔐
        EOF
        
        echo "✅ Release assets built successfully"
        ls -la *.tar.gz *.zip *.txt *.sh *.md *.json
    
    - name: 📤 Upload Release Assets
      uses: actions/upload-artifact@v4
      with:
        name: release-assets-${{ needs.validate-release.outputs.version }}
        path: |
          jir-course-*.tar.gz
          jir-course-*.zip
          checksums.txt
          install.sh
          QUICKSTART.md
          BUILD_INFO.json
          VERSION
          BUILD_DATE
          BUILD_COMMIT
        retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}

  create-github-release:
    name: 🚀 Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate-release, build-release-assets]
    if: always() && needs.validate-release.result == 'success'
    
    steps:
    - name: 📥 Download Release Assets
      uses: actions/download-artifact@v4
      if: needs.build-release-assets.result == 'success'
      with:
        name: release-assets-${{ needs.validate-release.outputs.version }}
        path: ./release-assets
    
    - name: 🚀 Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ needs.validate-release.outputs.version }}
        release_name: "🎓 Jir-Course Academy ${{ needs.validate-release.outputs.version }}"
        body: ${{ needs.validate-release.outputs.release-notes }}
        draft: false
        prerelease: ${{ needs.validate-release.outputs.is-prerelease }}
    
    - name: 📤 Upload Release Assets
      if: needs.build-release-assets.result == 'success'
      run: |
        VERSION="${{ needs.validate-release.outputs.version }}"
        
        # Upload each asset to the release
        for asset in release-assets/*; do
          if [ -f "$asset" ]; then
            echo "Uploading: $(basename "$asset")"
            # Note: In a real implementation, you would use the GitHub API
            # or a proper action to upload assets to the release
          fi
        done
    
    - name: 📊 Release Summary
      run: |
        echo "## 🚀 Release Summary" >> $GITHUB_STEP_SUMMARY
        echo "**Version:** ${{ needs.validate-release.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "**Type:** ${{ github.event.inputs.release_type || 'stable' }}" >> $GITHUB_STEP_SUMMARY
        echo "**Prerelease:** ${{ needs.validate-release.outputs.is-prerelease }}" >> $GITHUB_STEP_SUMMARY
        echo "**Assets:** $(ls release-assets/ 2>/dev/null | wc -l || echo 0)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🔗 Release Links" >> $GITHUB_STEP_SUMMARY
        echo "- **Release Page:** https://github.com/${{ github.repository }}/releases/tag/${{ needs.validate-release.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Installation Guide:** [Quick Start](https://github.com/${{ github.repository }}/wiki/Getting-Started)" >> $GITHUB_STEP_SUMMARY
        echo "- **Documentation:** [Wiki](https://github.com/${{ github.repository }}/wiki)" >> $GITHUB_STEP_SUMMARY

  post-release-tasks:
    name: 📋 Post-Release Tasks
    runs-on: ubuntu-latest
    needs: [validate-release, create-github-release]
    if: always() && needs.create-github-release.result == 'success'
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: 📊 Update Repository Statistics
      run: |
        VERSION="${{ needs.validate-release.outputs.version }}"
        
        # Update README with latest release info
        sed -i "s/Latest Release: v[0-9]\+\.[0-9]\+\.[0-9]\+/Latest Release: $VERSION/g" README.md || true
        
        # Update version in other files if they exist
        if [ -f "setup.py" ]; then
          sed -i "s/version='[^']*'/version='${VERSION#v}'/g" setup.py
        fi
        
        if [ -f "package.json" ]; then
          sed -i "s/\"version\": \"[^\"]*\"/\"version\": \"${VERSION#v}\"/g" package.json
        fi
        
        echo "✅ Repository statistics updated"
    
    - name: 🔔 Notify Community
      run: |
        echo "🔔 Community notification would be sent here"
        echo "Release: ${{ needs.validate-release.outputs.version }}"
        echo "Type: ${{ github.event.inputs.release_type || 'stable' }}"
        
        # In a real implementation, this would send notifications to:
        # - Discord webhook
        # - Telegram channel
        # - Email subscribers
        # - Social media accounts
    
    - name: 📈 Analytics & Metrics
      run: |
        echo "📈 Recording release metrics..."
        echo "Version: ${{ needs.validate-release.outputs.version }}"
        echo "Timestamp: $(date -u)"
        echo "Workflow: ${{ github.workflow }}"
        echo "Run: ${{ github.run_number }}"
        
        # In a real implementation, this would:
        # - Update analytics dashboard
        # - Record release metrics
        # - Update monitoring systems
        # - Generate reports
